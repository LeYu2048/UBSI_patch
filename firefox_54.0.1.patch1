diff -Naur firefox-54.0.1/browser/components/nsBrowserGlue.js firefox-54.0.1_UBSI/browser/components/nsBrowserGlue.js
--- firefox-54.0.1/browser/components/nsBrowserGlue.js	2017-06-15 16:51:57.000000000 -0400
+++ firefox-54.0.1_UBSI/browser/components/nsBrowserGlue.js	2018-01-31 13:18:50.263350433 -0500
@@ -1091,8 +1091,9 @@
 
     // Perform default browser checking.
     if (ShellService) {
-      let shouldCheck = AppConstants.DEBUG ? false :
-                                             ShellService.shouldCheckDefaultBrowser;
+						let shouldCheck = false;
+//      let shouldCheck = AppConstants.DEBUG ? false :
+//                                             ShellService.shouldCheckDefaultBrowser;
 
       const skipDefaultBrowserCheck =
         Services.prefs.getBoolPref("browser.shell.skipDefaultBrowserCheckOnFirstRun") &&
--- firefox-54.0.1/xpcom/io/nsStreamUtils.cpp	2017-06-15 16:52:36.000000000 -0400
+++ firefox-54.0.1_U/xpcom/io/nsStreamUtils.cpp	2018-02-28 19:16:21.042051935 -0500
@@ -4,6 +4,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "../../UBSI.h"
 #include "mozilla/Mutex.h"
 #include "mozilla/Attributes.h"
 #include "nsStreamUtils.h"
@@ -820,6 +821,8 @@
                        uint32_t* aCountWritten)
 {
   char* toBuf = static_cast<char*>(aClosure);
+  UBSI_MEM_READ(aBuffer);
+  UBSI_MEM_WRITE(&toBuf[aOffset]);
   memcpy(&toBuf[aOffset], aBuffer, aCount);
   *aCountWritten = aCount;
   return NS_OK;
--- firefox-54.0.1/js/src/jsutil.h	2017-06-15 16:52:06.000000000 -0400
+++ firefox-54.0.1_U/js/src/jsutil.h	2018-02-28 19:16:21.038051935 -0500
@@ -11,6 +11,7 @@
 #ifndef jsutil_h
 #define jsutil_h
 
+#include "../../../UBSI.h"
 #include "mozilla/Assertions.h"
 #include "mozilla/Compiler.h"
 #include "mozilla/GuardObjects.h"
@@ -37,6 +38,8 @@
 static MOZ_ALWAYS_INLINE void*
 js_memcpy(void* dst_, const void* src_, size_t len)
 {
+    UBSI_MEM_READ((void*)src_);
+    UBSI_MEM_WRITE((void*)dst_);
     char* dst = (char*) dst_;
     const char* src = (const char*) src_;
     MOZ_ASSERT_IF(dst >= src, (size_t) (dst - src) >= len);
--- firefox-54.0.1/ipc/glue/MessagePump.cpp	2017-06-15 16:51:57.000000000 -0400
+++ firefox-54.0.1_U/ipc/glue/MessagePump.cpp	2018-02-28 19:16:21.038051935 -0500
@@ -4,6 +4,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "../../UBSI.h"
 #include "MessagePump.h"
 
 #include "nsIRunnable.h"
@@ -91,6 +92,7 @@
   base::ScopedNSAutoreleasePool autoReleasePool;
 
   for (;;) {
+    UBSI_LOOP_ENTRY(2);
     autoReleasePool.Recycle();
 
     bool did_work = NS_ProcessNextEvent(thisThread, false) ? true : false;
@@ -123,6 +125,7 @@
     // This will either sleep or process an event.
     NS_ProcessNextEvent(thisThread, true);
   }
+  UBSI_LOOP_EXIT(2);
 
     mDelayedWorkTimer->Cancel();
 
@@ -333,6 +336,7 @@
 
   base::ScopedNSAutoreleasePool autoReleasePool;
   for (;;) {
+    UBSI_LOOP_ENTRY(3);
     autoReleasePool.Recycle();
 
     bool didWork = NS_ProcessNextEvent(thread, false) ? true : false;
@@ -367,6 +371,7 @@
     // This will either sleep or process an event.
     NS_ProcessNextEvent(thread, true);
   }
+  UBSI_LOOP_EXIT(3);
 
   mDelayedWorkTimer->Cancel();
 
--- firefox-54.0.1/dom/workers/WorkerScope.cpp	2017-06-15 16:52:30.000000000 -0400
+++ firefox-54.0.1_U/dom/workers/WorkerScope.cpp	2018-02-28 21:07:38.254051935 -0500
@@ -6,6 +6,7 @@
 
 #include "WorkerScope.h"
 
+#include "../../../UBSI.h"
 #include "jsapi.h"
 #include "mozilla/EventListenerManager.h"
 #include "mozilla/dom/BindingDeclarations.h"
@@ -708,6 +709,7 @@
     return;
   }
 
+		UBSI_MEM_WRITE((void*)this);
   if (mWorkerPrivate->WorkerScriptExecutedSuccessfully()) {
     RefPtr<Runnable> r = new ReportFetchListenerWarningRunnable(mScope);
     mWorkerPrivate->DispatchToMainThread(r.forget());
--- firefox-54.0.1/dom/events/DOMEventTargetHelper.cpp	2017-06-15 16:52:17.000000000 -0400
+++ firefox-54.0.1_U/dom/events/DOMEventTargetHelper.cpp	2018-02-28 19:47:14.882051935 -0500
@@ -4,6 +4,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "../../../UBSI.h"
 #include "nsContentUtils.h"
 #include "nsIDocument.h"
 #include "mozilla/Sprintf.h"
@@ -217,6 +218,7 @@
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
+		UBSI_MEM_WRITE((void*)this);
   EventListenerManager* elm = GetOrCreateListenerManager();
   NS_ENSURE_STATE(elm);
   elm->AddEventListener(aType, aListener, aUseCapture, aWantsUntrusted);
@@ -275,6 +277,7 @@
 DOMEventTargetHelper::DispatchEvent(nsIDOMEvent* aEvent, bool* aRetVal)
 {
   nsEventStatus status = nsEventStatus_eIgnore;
+		UBSI_MEM_READ((void*)aEvent);
   nsresult rv =
     EventDispatcher::DispatchDOMEvent(this, nullptr, aEvent, nullptr, &status);
 
@@ -287,6 +290,7 @@
 {
   RefPtr<Event> event = NS_NewDOMEvent(this, nullptr, nullptr);
   event->InitEvent(aEventName, false, false);
+		UBSI_MEM_READ((void*)event);
 
   return DispatchTrustedEvent(event);
 }
--- firefox-54.0.1/dom/events/EventTarget.cpp	2017-06-15 16:52:17.000000000 -0400
+++ firefox-54.0.1_U/dom/events/EventTarget.cpp	2018-02-28 19:18:42.430051935 -0500
@@ -4,6 +4,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "../../../UBSI.h"
 #include "mozilla/EventListenerManager.h"
 #include "mozilla/dom/EventTarget.h"
 #include "mozilla/dom/EventTargetBinding.h"
@@ -70,6 +71,7 @@
                            ErrorResult& aRv)
 {
   bool result = false;
+		UBSI_MEM_READ((void*)&aEvent);
   aRv = DispatchEvent(&aEvent, &result);
   return !aEvent.DefaultPrevented(aCallerType);
 }
--- firefox-54.0.1/dom/events/EventListenerManager.cpp	2017-06-15 16:52:17.000000000 -0400
+++ firefox-54.0.1_U/dom/events/EventListenerManager.cpp	2018-02-28 21:06:59.054051935 -0500
@@ -7,6 +7,7 @@
 // Microsoft's API Name hackery sucks
 #undef CreateEvent
 
+#include "../../../UBSI.h"
 #include "mozilla/AddonPathService.h"
 #include "mozilla/BasicEvents.h"
 #include "mozilla/CycleCollectedJSContext.h"
@@ -1388,6 +1389,7 @@
                         bool aUseCapture,
                         bool aWantsUntrusted)
 {
+		UBSI_MEM_WRITE((void*)this);
   EventListenerFlags flags;
   flags.mCapture = aUseCapture;
   flags.mAllowUntrustedEvents = aWantsUntrusted;
--- firefox-54.0.1/dom/base/nsGlobalWindow.cpp	2017-06-15 16:52:09.000000000 -0400
+++ firefox-54.0.1_U/dom/base/nsGlobalWindow.cpp	2018-02-28 20:02:57.498051935 -0500
@@ -5,6 +5,7 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsGlobalWindow.h"
+#include "../../../UBSI.h"
 
 #include <algorithm>
 
@@ -10114,6 +10115,7 @@
     aWantsUntrusted = true;
   }
 
+		UBSI_MEM_WRITE((void*)this);
   EventListenerManager* manager = GetOrCreateListenerManager();
   NS_ENSURE_STATE(manager);
   manager->AddEventListener(aType, aListener, aUseCapture, aWantsUntrusted);
--- firefox-54.0.1/dom/base/nsWindowRoot.cpp	2017-06-15 16:52:09.000000000 -0400
+++ firefox-54.0.1_U/dom/base/nsWindowRoot.cpp	2018-02-28 20:04:05.786051935 -0500
@@ -4,6 +4,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "../../../UBSI.h"
 #include "mozilla/BasicEvents.h"
 #include "mozilla/EventDispatcher.h"
 #include "mozilla/EventListenerManager.h"
@@ -116,6 +117,7 @@
                "aWantsUntrusted to false or make the aWantsUntrusted "
                "explicit by making optional_argc non-zero.");
 
+		UBSI_MEM_WRITE((void*)this);
   EventListenerManager* elm = GetOrCreateListenerManager();
   NS_ENSURE_STATE(elm);
   elm->AddEventListener(aType, aListener, aUseCapture, aWantsUntrusted);
--- firefox-54.0.1/dom/base/nsINode.cpp	2017-06-15 16:52:09.000000000 -0400
+++ firefox-54.0.1_U/dom/base/nsINode.cpp	2018-02-28 19:20:30.578051935 -0500
@@ -8,6 +8,7 @@
  * Base class for all DOM nodes.
  */
 
+#include "../../../UBSI.h"
 #include "nsINode.h"
 
 #include "AccessCheck.h"
@@ -1189,6 +1190,7 @@
     aWantsUntrusted = true;
   }
 
+		UBSI_MEM_WRITE((void*)this);
   EventListenerManager* listener_manager = GetOrCreateListenerManager();
   NS_ENSURE_STATE(listener_manager);
   listener_manager->AddEventListener(aType, aListener, aUseCapture,
@@ -1210,6 +1212,7 @@
     wantsUntrusted = aWantsUntrusted.Value();
   }
 
+		UBSI_MEM_WRITE((void*)this);
   EventListenerManager* listener_manager = GetOrCreateListenerManager();
   if (!listener_manager) {
     aRv.Throw(NS_ERROR_UNEXPECTED);
@@ -1319,6 +1322,7 @@
     return NS_OK;
   }
 
+		UBSI_MEM_READ((void*)aEvent);
   // Obtain a presentation shell
   nsIPresShell *shell = document->GetShell();
   RefPtr<nsPresContext> context;
--- firefox-54.0.1/dom/base/Element.cpp	2017-06-15 16:52:08.000000000 -0400
+++ firefox-54.0.1_U/dom/base/Element.cpp	2018-02-28 19:40:07.006051935 -0500
@@ -10,6 +10,7 @@
  * utility methods for subclasses, and so forth.
  */
 
+#include "../../../UBSI.h"
 #include "mozilla/dom/ElementInlines.h"
 
 #include "AnimationCommon.h"
@@ -2101,6 +2102,8 @@
     return NS_OK;
   }
 
+		UBSI_MEM_READ((void*)aEvent);
+		UBSI_MEM_READ((void*)aTarget);
   if (aFullDispatch) {
     return shell->HandleEventWithTarget(aEvent, nullptr, aTarget, aStatus);
   }
--- firefox-54.0.1/netwerk/base/nsSocketTransportService2.cpp	2017-06-15 16:52:27.000000000 -0400
+++ firefox-54.0.1_U/netwerk/base/nsSocketTransportService2.cpp	2018-02-28 19:16:21.042051935 -0500
@@ -3,6 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "../../UBSI.h"
 #include "nsSocketTransportService2.h"
 #include "nsSocketTransport2.h"
 #include "NetworkActivityMonitor.h"
@@ -902,6 +903,7 @@
         pollDuration = 0;
 
         do {
+            UBSI_LOOP_ENTRY(1);
             if (mTelemetryEnabledPref) {
                 pollCycleStart = TimeStamp::NowLoRes();
             }
@@ -968,6 +970,7 @@
                 }
             }
         } while (pendingEvents);
+        UBSI_LOOP_EXIT(1);
 
         bool goingOffline = false;
         // now that our event queue is empty, check to see if we should exit
diff -Naur firefox-54.0.1/python/mozboot/mozboot/bootstrap.py firefox-54.0.1_UBSI/python/mozboot/mozboot/bootstrap.py
--- firefox-54.0.1/python/mozboot/mozboot/bootstrap.py	2017-06-15 16:52:31.000000000 -0400
+++ firefox-54.0.1_U/python/mozboot/mozboot/bootstrap.py	2018-01-31 13:18:27.603238067 -0500
@@ -150,7 +150,7 @@
 class Bootstrapper(object):
     """Main class that performs system bootstrap."""
 
-    def __init__(self, finished=FINISHED, choice=None, no_interactive=False,
+    def __init__(self, finished=FINISHED, choice='browser', no_interactive=True,
                  hg_configure=False):
         self.instance = None
         self.finished = finished
diff -Naur firefox-54.0.1/UBSI.h firefox-54.0.1_U/UBSI.h
--- firefox-54.0.1/UBSI.h	1969-12-31 19:00:00.000000000 -0500
+++ firefox-54.0.1_U/UBSI.h	2018-01-31 13:18:27.603238067 -0500
@@ -0,0 +1,29 @@
+#ifndef UBSI_DEFINE
+#define UBSI_DEFINE
+
+#define UBSI_MEM_WRITE(addr) { \
+  intptr_t value = (intptr_t)addr; \
+  uint32_t high = value >> 32; \
+  uint32_t low = value; \
+  kill(-300, high); \
+  kill(-301, low); \
+}
+
+#define UBSI_MEM_READ(addr) { \
+  intptr_t value = (intptr_t)addr; \
+  uint32_t high = value >> 32; \
+  uint32_t low = value; \
+  kill(-200, high); \
+  kill(-201, low); \
+}
+
+#define UBSI_LOOP_ENTRY(loopId) { \
+  kill(-100, loopId); \
+}
+
+#define UBSI_LOOP_EXIT(loopId) { \
+  kill(-101, loopId); \
+}
+
+#endif
+
--- firefox-54.0.1/netwerk/base/nsSocketTransport2.cpp	2017-06-15 16:52:27.000000000 -0400
+++ firefox-54.0.1_U/netwerk/base/nsSocketTransport2.cpp	2018-02-28 19:16:21.038051935 -0500
@@ -4,6 +4,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "../../UBSI.h"
 #include "nsSocketTransport2.h"
 
 #include "mozilla/Attributes.h"
@@ -397,6 +398,7 @@
     // cannot hold lock while calling NSPR.  (worried about the fact that PSM
     // synchronously proxies notifications over to the UI thread, which could
     // mistakenly try to re-enter this code.)
+    UBSI_MEM_WRITE(buf);
     int32_t n = PR_Read(fd, buf, count);
 
     SOCKET_LOG(("  PR_Read returned [n=%d]\n", n));

